---
## VAR SETUP
- name: 'Set SmartOS etc prefix'
  set_fact: etc_prefix=/opt/local/etc
  when: ansible_os_family == "Solaris"

- name: 'Set SmartOS haproxy config location'
  set_fact: config_location=/opt/local/etc/haproxy.cfg
  when: ansible_os_family == "Solaris"

- name: 'Set Ubuntu directory prefix'
  set_fact: etc_prefix=/etc
  when: ansible_os_family == "Debian"

- name: 'Set Ubuntu haproxy config location'
  set_fact: config_location=/etc/haproxy/haproxy.cfg
  when: ansible_os_family == "Debian"

## PACKAGE INSTALL

- name: 'Add PPA for haproxy'
  apt_repository: repo='ppa:vbernat/haproxy-1.5' update_cache=yes
  when: ansible_os_family == 'Debian'

- name: 'Installs haproxy as well as socat for socket api'
  apt: pkg={{ item }} state=installed
  with_items:
    - haproxy
    - socat
  when: ansible_os_family == 'Debian'

- name: 'Installs haproxy as well as socat for socket api'
  pkgin: name={{ item }} state=present
  with_items:
    - haproxy
    - socat
  when: ansible_os_family == 'Solaris'

- name: 'Enable it'
  copy: src=haproxy-default dest=/etc/default/haproxy

- name: 'Ensure chroot directory exists'
  file: name={{ haproxy_global.chroot }} state=directory
  when: haproxy_global.chroot is defined and haproxy_global.chroot is not false

## ASSEMBLE CONFIG - FRONTEND

- name: 'Create directory for the frontend'
  file: path={{ etc_prefix }}/haproxy/frontends.d state=directory

- name: 'Empty the folder if not already empty'
  command: rm -f {{ etc_prefix }}/haproxy/frontends.d/*.cfg

- name: 'Build up the frontends'
  template: src=frontend.cfg dest={{ etc_prefix }}/haproxy/frontends.d/{{ item.name }}.cfg
  with_items: haproxy_frontends
  when: haproxy_frontends is defined

## ASSEMBLE CONFIG - BACKEND

- name: 'Create directory for the backends'
  file: path={{ etc_prefix }}/haproxy/backends.d state=directory

- name: 'Empty the folder if not already empty'
  command: rm -f {{ etc_prefix }}/haproxy/backends.d/*.cfg

- name: 'Build up the backends'
  template: src=backend.cfg dest={{ etc_prefix }}/haproxy/backends.d/{{ item.name }}.cfg
  with_items: haproxy_backends
  when: haproxy_backends is defined

## ASSEMBLE CONFIG - LISTEN

- name: 'Create directory for the listen sections'
  file: path={{ etc_prefix }}/haproxy/listen.d state=directory

- name: 'Empty the folder if not already empty'
  command: rm -f {{ etc_prefix }}/haproxy/listen.d/*.cfg

- name: 'Build up the listen sections'
  template: src=listen.cfg dest={{ etc_prefix }}/haproxy/listen.d/{{ item.name }}.cfg
  with_items: haproxy_listen
  when: haproxy_listen is defined

## ASSEMBLE CONFIG - GLOBAL & DEFAULT

- name: 'Create  the compiled folder'
  file: path={{ etc_prefix }}/haproxy/compiled state=directory

- name: 'Empty the folder if not already empty'
  command: rm -f {{ etc_prefix }}/haproxy/compiled/*.cfg

- name: 'Build up the global config'
  template: src=global.cfg dest={{ etc_prefix }}/haproxy/compiled/01-global.cfg
  when: haproxy_global is defined
  tags: 'test'

- name: 'Build up the default config'
  template: src=defaults.cfg dest={{ etc_prefix }}/haproxy/compiled/02-defaults.cfg
  when: haproxy_defaults is defined

## ASSEMBLE FINAL CONFIG

- name: 'Assemble the backends configuration file'
  assemble: src={{ etc_prefix }}/haproxy/backends.d dest={{ etc_prefix }}/haproxy/compiled/03-backends.cfg

- name: 'Assemble the frontends configuration file'
  assemble: src={{ etc_prefix }}/haproxy/frontends.d dest={{ etc_prefix }}/haproxy/compiled/04-frontends.cfg

- name: 'Assemble the listen sections configuration file'
  assemble: src={{ etc_prefix }}/haproxy/listen.d dest={{ etc_prefix }}/haproxy/compiled/05-listen.cfg

- name: 'Assemble the final configuration file'
  assemble: src={{ etc_prefix }}/haproxy/compiled dest={{ config_location }} backup=yes
  notify: restart haproxy
